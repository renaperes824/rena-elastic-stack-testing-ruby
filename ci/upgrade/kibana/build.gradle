/*
    @description: Kibana tasks for upgrade testing

    @author: Liza Dayoub

 */

import org.estf.gradle.ShellCommand
import java.util.stream.Collectors

group 'org.estf.cloud'
version '1.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

static def runcmd(String c, File dir) {
    println(c)
    Process p
    if (dir == null)
        p = c.execute()
    else
        p = c.execute([], dir)
    p.waitFor()
    println(p.text)
    println(p.exitValue())
    if (p.exitValue() != 0) {
        throw new GradleException('Error ' + c)
    }
}

task get_kibana_repo {
    doFirst {
        println("******* SECTION: GET KIBANA REPO *******")
        println "In ${name}"
        def github_owner = System.env.ESTF_GITHUB_OWNER ?: "elastic"
        def repo = System.env.ESTF_GITHUB_REPO ?: "kibana.git"
        def version = (System.env.ESTF_KIBANA_VERSION) ?: rootProject.kibana_version
        def branch = System.env.ESTF_GITHUB_BRANCH
        def commit = System.env.ESTF_GITHUB_COMMIT
        def kibanaRefRepo = System.env.ESTF_KIBANA_REF_REPO ?: "/var/lib/jenkins/.git-references/kibana.git"

        String checkout_ver = version

        if (github_owner != "elastic" && !branch) {
            throw new GradleException("ESTF_GITHUB_BRANCH must be specified")
        }
        if (branch) {
            checkout_ver = branch
        }

        def cloneOpts = ""
        if (kibanaRefRepo) {
            File kibanaRefRepoDir = new File(kibanaRefRepo)
            if (kibanaRefRepoDir.exists()) {
                cloneOpts = '--reference ' + kibanaRefRepo
            }
        }

        String kibanaRepo = 'git@github.com:' + github_owner + '/' + repo
        String cloneCmd = 'git clone ' + cloneOpts + ' ' + kibanaRepo + ' ' + "$buildDir/kibana"
        File dir = new File("$buildDir/kibana")
        runcmd(cloneCmd, null)

        // Test run for: https://github.com/elastic/kibana/pull/128309
        runcmd('git fetch origin pull/128309/head:pr-128309', dir)
        runcmd('git checkout pr-128309', dir)

        /*
        runcmd('git checkout ' + checkout_ver, dir)

        if (commit) {
            runcmd('git checkout ' + commit.toString(), dir)
        } else if (rootProject.hasProperty('kibana_hash') &&
                   !System.env.ESTF_FLAKY_TEST_SUITE &&
                   !System.env.ESTF_KIBANA_CHECKOUT_LATEST) {
            runcmd('git checkout ' + rootProject.kibana_hash.toString(), dir)
        }
        */
        def src = new File(System.env.WORKSPACE.toString() + "/ci/kibana/jenkins_kibana_tests.sh")
        if (!src.exists()) {
            throw new GradleException("jenkins_kibana_tests.sh does not exist")
        }
        def dst = new File("$buildDir/kibana/jenkins_kibana_tests.sh")
        dst << src.text
        dst.setExecutable(true, false)

        def src2 = new File(System.env.WORKSPACE.toString() + "/ci/kibana/group_defs.sh")
        if (!src2.exists()) {
            throw new GradleException("group_defs.sh does not exist")
        }
        def dst2 = new File("$buildDir/kibana/group_defs.sh")
        dst2 << src2.text
        dst2.setExecutable(true, false)
    }
}

task get_kibana_commit(type:Exec, dependsOn: get_kibana_repo) {
    doFirst {
        println("******* SECTION: GET KIBANA COMMIT *******")
        print "In ${name}"
        workingDir "$buildDir/kibana"
        commandLine '/usr/bin/git', 'log', '--pretty=oneline', '--abbrev-commit', '-n', '1'
    }
}

task run_kibana_tests(dependsOn: get_kibana_commit) {
    doFirst {

        println("******* SECTION: RUN KIBANA TESTS *******")

        def sel_test_suites = (String) rootProject.ext.test_suites
        def test_suites = sel_test_suites.split(',')
        def test_failures = []

        // Add system environment variables
        def envList = []
        System.getenv().each { key, value ->
            envList.add(key + "=" + value)
        }

        println "************ SYSTEM ENVIRONMENT VARS ************"
        println System.getenv()
        println "*************************************************"

        // Add specific Kibana environment variables
        if (rootProject.hasProperty('tls_reject')) {
            envList.add("NODE_TLS_REJECT_UNAUTHORIZED=0")
            envList.add("TEST_IGNORE_CERT_ERRORS=1")
        }

        URI kibanaUri = new URI((String) rootProject.props.kibana_url)
        URI elasticUri = new URI((String) rootProject.props.elasticsearch_url)

        envList.add("TEST_KIBANA_HOSTNAME=" + kibanaUri?.getHost())
        envList.add("TEST_KIBANA_PROTOCOL=" + 'https')
        envList.add("TEST_KIBANA_PORT=" + kibanaUri?.getPort())
        envList.add("TEST_ES_PASS=" + (String) rootProject.props.es_password)
        envList.add("ESTF_FTR_ES_VERSION=" + (String) rootProject.finalVersion)

        if ('kibana' in test_suites || 'all' in test_suites) {
            def envList1 = []
            envList1.addAll(envList)
            envList1.add("TEST_ES_USERNAME=" + (String) rootProject.props.es_username)
            envList1.add("TEST_KIBANA_USERNAME=" + (String) rootProject.props.es_username)
            envList1.add("TEST_KIBANA_PASS=" + (String) rootProject.props.es_password)

            envList1.add("TEST_ES_HOSTNAME=" + elasticUri?.getHost())
            envList1.add("TEST_ES_PROTOCOL=" + 'https')
            envList1.add("TEST_ES_PORT=" + elasticUri?.getPort())

            println "************ KIBANA TEST ENVIRONMENT VARS ************"
            println envList1
            println "******************************************************"

            println "Running Kibana Tests...."
            ShellCommand kibanaTests = new ShellCommand("./jenkins_kibana_tests.sh upgrade",
                                                        "$buildDir/kibana",
                                                        envList1)
            kibanaTests.waitFor()
            test_failures.add(kibanaTests.getRc())
        }
        if ('security-solutions' in test_suites || 'all' in test_suites) {

            def auth = 'https://' + (String) rootProject.props.es_username + ":" +
                    (String) rootProject.props.es_password + "@"
            def kbn_url_auth = auth + kibanaUri?.getHost() + ":" +  kibanaUri?.getPort()
            def es_url_auth = auth + elasticUri?.getHost() + ":" + elasticUri?.getPort()

            def envList2 = []
            envList2.addAll(envList)
            envList2.add("TEST_ES_USER=" + (String) rootProject.props.es_username)
            envList2.add("ORIGINAL_VERSION=" + (String) rootProject.createVersion)
            envList2.add("TEST_KIBANA_URL=" + kbn_url_auth)
            envList2.add("TEST_ES_URL=" + es_url_auth)

            println "************ KIBANA TEST ENVIRONMENT VARS ************"
            println envList2
            println "******************************************************"

            println "Running Security Solution Tests...."
            ShellCommand securitySolnTests = new ShellCommand("./jenkins_kibana_tests.sh upgrade_security_solution",
                                                              "$buildDir/kibana",
                                                              envList2)
            securitySolnTests.waitFor()
            test_failures.add(securitySolnTests.getRc())
        }

        def test_failure_list = test_failures.stream().distinct().collect(Collectors.toList())
        if (test_failure_list.size() > 1 ||
            (test_failure_list.size() == 1 && test_failure_list.get(0) != 0)) {
             throw new GradleException("Kibana Tests Failed!")
        }
    }
}
