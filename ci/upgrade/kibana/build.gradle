/*
    @description: Kibana tasks for upgrade testing

    @author: Liza Dayoub

 */

import org.estf.gradle.ShellCommand
import org.ajoberstar.grgit.Grgit

plugins {
  id 'org.ajoberstar.grgit' version '4.0.2' apply false
}

group 'org.estf.cloud'
version '1.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

// *********************************************************************************
task clone_kibana_repo {
  doFirst {
    println "In ${name}"
    def github_owner = System.env.ESTF_GITHUB_OWNER ?: "elastic"
    def repo = System.env.ESTF_GITHUB_REPO ?: "kibana.git"
    def version = System.env.ESTF_KIBANA_VERSION ?: rootProject.kibana_version
    def branch = System.env.ESTF_GITHUB_BRANCH
    def commit = System.env.ESTF_GITHUB_COMMIT

    def checkout_ver = version

    if (!checkout_ver) {
        throw new GradleException("Kibana version can't be empty")
    }
    if (github_owner != "elastic" && !branch) {
        throw new GradleException("ESTF_GITHUB_BRANCH must be specified")
    }
    if (branch) {
        checkout_ver = branch
    }
    def grgit = Grgit.clone(dir: "$buildDir/kibana",
                            uri: 'git@github.com:' + github_owner + '/' + repo,
                            refToCheckout: checkout_ver)
    if (commit) {
        grgit.checkout(branch: commit)
    } else if (rootProject.hasProperty('kibana_hash') && ! System.env.ESTF_FLAKY_TEST_SUITE && ! System.env.ESTF_KIBANA_CHECKOUT_LATEST) {
        println("Checking out: " + rootProject.kibana_hash)
        grgit.checkout(branch: rootProject.kibana_hash)
    }
    println grgit.describe()
  }
}

task get_kibana_commit(type:Exec, dependsOn: clone_kibana_repo) {
    doFirst {
        print "In ${name}"
        println("---------- KIBANA REPO COMMIT INFO ----------")
        workingDir "$buildDir/kibana"
        commandLine '/usr/bin/git', 'log', '--pretty=oneline', '--abbrev-commit', '-n', '1'
    }
}

task get_jenkins_exe (type: Copy, dependsOn: get_kibana_commit) {
    println "In ${name}"
    from "$buildDir/../../../kibana"
    into "$buildDir/kibana"
    include "*.sh"
}

task run_kibana_tests(dependsOn: get_jenkins_exe) {
    doFirst {

        println("******* SECTION: RUN KIBANA TESTS *******")

        // Add system environment variables
        def envList = []
        System.getenv().each { key, value ->
            envList.add(key + "=" + value)
        }

        def kibanaUri = new URI(rootProject.props.kibana_url)
        def elasticUri = new URI(rootProject.props.elasticsearch_url)

        // Add specific Kibana environment variables
        envList.add("TEST_KIBANA_HOSTNAME=" + kibanaUri?.getHost())
        envList.add("TEST_KIBANA_PROTOCOL=" + 'https')
        envList.add("TEST_KIBANA_PORT=" + kibanaUri?.getPort())
        envList.add("TEST_KIBANA_USER=" + rootProject.props.es_username)
        envList.add("TEST_KIBANA_PASS=" + rootProject.props.es_password)

        envList.add("TEST_ES_HOSTNAME=" + elasticUri?.getHost())
        envList.add("TEST_ES_PROTOCOL=" + 'https')
        envList.add("TEST_ES_PORT=" + elasticUri?.getPort())
        envList.add("TEST_ES_USER=" + rootProject.props.es_username)
        envList.add("TEST_ES_PASS=" + rootProject.props.es_password)

        if (rootProject.hasProperty('tls_reject')) {
            envList.add("NODE_TLS_REJECT_UNAUTHORIZED=0")
            envList.add("TEST_IGNORE_CERT_ERRORS=1")
        }

        println "************"
        println System.getenv()
        println "************"

        println "************"
        println envList
        println "************"

        println "Running Kibana Tests...."
        // Run Kibana tests
        ShellCommand shell
        shell = new ShellCommand("./jenkins_kibana_tests.sh upgrade", "$buildDir/kibana", envList)
        shell.waitFor()

        if (shell.getRc() != 0) {
            throw new GradleException("Kibana Tests Failed!")
        }
    }
}
