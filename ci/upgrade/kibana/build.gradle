/*
    @description: Kibana tasks for upgrade testing

    @author: Liza Dayoub

 */

import org.estf.gradle.ShellCommand
import org.ajoberstar.grgit.Grgit
import java.util.stream.Collectors


plugins {
  id 'org.ajoberstar.grgit' version '4.1.0' apply false
}

group 'org.estf.cloud'
version '1.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

// *********************************************************************************
task clone_kibana_repo {
  doFirst {
    println "In ${name}"
    def github_owner = System.env.ESTF_GITHUB_OWNER ?: "elastic"
    def repo = System.env.ESTF_GITHUB_REPO ?: "kibana.git"
    def version = System.env.ESTF_KIBANA_VERSION ?: rootProject.kibana_version
    def branch = System.env.ESTF_GITHUB_BRANCH
    def commit = System.env.ESTF_GITHUB_COMMIT

    def checkout_ver = version

    if (!checkout_ver) {
        throw new GradleException("Kibana version can't be empty")
    }
    if (github_owner != "elastic" && !branch) {
        throw new GradleException("ESTF_GITHUB_BRANCH must be specified")
    }
    if (branch) {
        checkout_ver = branch
    }
    def grgit = Grgit.clone(dir: "$buildDir/kibana",
                            uri: 'git@github.com:' + github_owner + '/' + repo,
                            refToCheckout: checkout_ver)
    if (commit) {
        grgit.checkout(branch: commit)
    } else if (rootProject.hasProperty('kibana_hash') && ! System.env.ESTF_FLAKY_TEST_SUITE && ! System.env.ESTF_KIBANA_CHECKOUT_LATEST) {
        println("Checking out: " + rootProject.kibana_hash)
        grgit.checkout(branch: rootProject.kibana_hash)
    }
    println grgit.describe()

    def src = new File(System.env.WORKSPACE + "/ci/kibana/jenkins_kibana_tests.sh")
    if (!src.exists()) {
        throw new GradleException("jenkins_kibana_tests.sh does not exist")
    }
    def dst = new File("$buildDir/kibana/jenkins_kibana_tests.sh")
    dst << src.text
    dst.setExecutable(true, false)
  }
}

task get_kibana_commit(type:Exec, dependsOn: clone_kibana_repo) {
    doFirst {
        print "In ${name}"
        println("---------- KIBANA REPO COMMIT INFO ----------")
        workingDir "$buildDir/kibana"
        commandLine '/usr/bin/git', 'log', '--pretty=oneline', '--abbrev-commit', '-n', '1'
    }
}

task run_kibana_tests(dependsOn: get_kibana_commit) {
    doFirst {

        def sel_test_suites = rootProject.ext.test_suites
        def test_suites = sel_test_suites.split(',')
        def test_failures = []

        println("******* SECTION: RUN KIBANA TESTS *******")

        // Add system environment variables
        def envList = []
        System.getenv().each { key, value ->
            envList.add(key + "=" + value)
        }

        println "************ SYSTEM ENVIRONMENT VARS ************"
        println System.getenv()
        println "*************************************************"

        // Add specific Kibana environment variables
        if (rootProject.hasProperty('tls_reject')) {
            envList.add("NODE_TLS_REJECT_UNAUTHORIZED=0")
            envList.add("TEST_IGNORE_CERT_ERRORS=1")
        }

        def kibanaUri = new URI(rootProject.props.kibana_url)
        def elasticUri = new URI(rootProject.props.elasticsearch_url)

        envList.add("TEST_KIBANA_HOSTNAME=" + kibanaUri?.getHost())
        envList.add("TEST_KIBANA_PROTOCOL=" + 'https')
        envList.add("TEST_KIBANA_PORT=" + kibanaUri?.getPort())

        envList.add("TEST_ES_USER=" + rootProject.props.es_username)
        envList.add("TEST_ES_PASS=" + rootProject.props.es_password)

        if ('kibana' in test_suites || 'all' in test_suites) {

            def envList1 = []
            envList1.addAll(envList)

            envList1.add("TEST_KIBANA_USER=" + rootProject.props.es_username)
            envList1.add("TEST_KIBANA_PASS=" + rootProject.props.es_password)

            envList1.add("TEST_ES_HOSTNAME=" + elasticUri?.getHost())
            envList1.add("TEST_ES_PROTOCOL=" + 'https')
            envList1.add("TEST_ES_PORT=" + elasticUri?.getPort())

            println "************ KIBANA TEST ENVIRONMENT VARS ************"
            println envList1
            println "******************************************************"

            println "Running Kibana Tests...."
            ShellCommand kibanaTests = new ShellCommand("./jenkins_kibana_tests.sh upgrade", "$buildDir/kibana", envList1)
            kibanaTests.waitFor()
            test_failures.add(kibanaTests.getRc())
        }

        if ('security-solutions' in test_suites || 'all' in test_suites) {
            def envList2 = []
            envList2.addAll(envList)
            envList2.add("TEST_KIBANA_URL=" + kibanaUri)
            envList2.add("TEST_ES_URL=" + elasticUri)

            println "************ KIBANA TEST ENVIRONMENT VARS ************"
            println envList2
            println "******************************************************"

            println "Running Security Solution Tests...."
            ShellCommand securitySolnTests = new ShellCommand("./jenkins_kibana_tests.sh upgrade_security_solution", "$buildDir/kibana", envList2)
            securitySolnTests.waitFor()
            test_failures.add(securitySolnTests.getRc())
        }

        def test_failure_list = test_failures.stream().distinct().collect(Collectors.toList())
        if (test_failure_list.size() > 1 ||
            (test_failure_list.size() == 1 && test_failure_list.get(0) != 0)) {
             throw new GradleException("Kibana Tests Failed!")
        }
    }
}
