/*
    @description: Build tasks for cloud provisioning and executing tests

    @author: Liza Dayoub

 */

import com.sun.org.apache.xalan.internal.xslt.Process
import org.estf.gradle.SetupCloudCluster
import org.estf.gradle.DeleteCloudCluster
import org.estf.gradle.ShellCommand
import org.ajoberstar.grgit.Grgit

plugins {
  id 'org.ajoberstar.grgit' version '1.7.2' apply false
}

group 'org.estf.cloud'
version '1.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

/*
 General Methods
 */
def genSetupTask(testname) {
    return tasks.create("setup_" + testname, SetupCloudCluster)
}

def genCleanupTask(testname, clusterId) {
    return tasks.create("cleanup_" + testname, DeleteCloudCluster) {
        cluster_id = clusterId
    }
}

/*
 Kibana
 */
task get_kibana_repo {
  doLast {
    def grgit = Grgit.clone(dir: "$buildDir/kibana",
                            uri: 'git@github.com:elastic/kibana.git',
                            refToCheckout: System.env.ESTF_KIBANA_VERSION)
    println grgit.describe()
  }
}

task kibana_tests {
    doFirst {
        // Setup cloud cluster
        def _setup_task = genSetupTask('kibana')
        _setup_task.execute()
        
        def propFile = _setup_task.getPropertiesFile()

        // Load properties file
        Properties properties = new Properties()
        File propertiesFile = new File(propFile.trim())
        propertiesFile.withInputStream {
            properties.load(it)
        }

        URI kibanaUri = new URI(properties.kibana_url)
        URI elasticUri = new URI(properties.elasticsearch_url)

        // Add system environment variables
        def envList = []
        System.getenv().each { key, value ->
            envList.add(key + "=" + value)
        }

        println "**************"
        println System.getenv() 
        println "**************"

        // Add specific Kibana environment variables
        envList.add("TEST_KIBANA_HOSTNAME=" + kibanaUri?.getHost())
        envList.add("TEST_KIBANA_PROTOCOL=" + 'https')
        envList.add("TEST_KIBANA_PORT=" + kibanaUri?.getPort())
        envList.add("TEST_KIBANA_USER=" + properties.es_username)
        envList.add("TEST_KIBANA_PASS=" + properties.es_password)

        envList.add("TEST_ES_HOSTNAME=" + elasticUri?.getHost())
        envList.add("TEST_ES_PROTOCOL=" + 'https')
        envList.add("TEST_ES_PORT=" + elasticUri?.getPort())
        envList.add("TEST_ES_USER=" + properties.es_username)
        envList.add("TEST_ES_PASS=" + properties.es_password)

        // Run Kibana tests
        ShellCommand shell = new ShellCommand("./test/scripts/jenkins_cloud.sh", "$buildDir/kibana", envList )
        shell.waitFor()

        println "**************"
        println System.getenv() 
        println "**************"

        def _cleanup_task = genCleanupTask('kibana', _setup_task.getClusterId())

        if (shell.getRc() != 0) {
            _cleanup_task.execute()    
             throw new GradleException("Kibana Tests Failed")
        }  else {
             _cleanup_task.execute()
        }
    }
}

kibana_tests.dependsOn get_kibana_repo
