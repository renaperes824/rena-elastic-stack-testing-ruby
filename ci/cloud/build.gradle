/*
    @description: Build tasks for cloud provisioning and executing tests

    @author: Liza Dayoub

 */

import com.sun.org.apache.xalan.internal.xslt.Process
import org.estf.gradle.CreateCloudCluster
import org.estf.gradle.DeleteCloudCluster
import org.estf.gradle.EditCloudCluster
import org.estf.gradle.UpgradeCloudCluster
import org.estf.gradle.UploadData
import org.estf.gradle.ShellCommand
import org.ajoberstar.grgit.Grgit
import groovy.json.JsonSlurper


plugins {
  id 'org.ajoberstar.grgit' version '1.7.2' apply false
}

group 'org.estf.cloud'
version '1.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

/*
 General Methods
 */

// Generate setup cloud cluster task
def genSetupTask(testname) {
    return tasks.create("setup_" + testname, CreateCloudCluster) {
        stackVersion = System.env.ESTF_CLOUD_VERSION
        esUserSettings = System.env.ESTF_ES_USER_SETTINGS
        kibanaUserSettings = System.env.ESTF_KIBANA_USER_SETTINGS
    }
}

// Generate cleanup cloud cluster task
def genCleanupTask(testname, cluster_id) {
    return tasks.create("cleanup_" + testname, DeleteCloudCluster) {
        clusterId = cluster_id
    }
}

// Generate edit cloud cluster task
def genEditTask(testname, cluster_id, kibana_cluster_id, disable_scripts) {
    return tasks.create("edit_" + testname, EditCloudCluster) {
        clusterId = cluster_id
        kibanaClusterId = kibana_cluster_id
        esScriptSettings = disable_scripts
        upgradeStackVersion = System.env.ESTF_UPGRADE_CLOUD_VERSION
        esUserSettings = System.env.ESTF_ES_USER_SETTINGS
        kibanaUserSettings = System.env.ESTF_KIBANA_USER_SETTINGS
    }
}

// Generate upgrade cloud task
def genUpgradeTask(testname, cluster_id, kibana_cluster_id, major_upgrade) {
    return tasks.create("upgrade_" + testname, UpgradeCloudCluster) {
        clusterId = cluster_id
        kibanaClusterId = kibana_cluster_id
        upgradeStackVersion = System.env.ESTF_UPGRADE_CLOUD_VERSION
    }
}

/*
 Kibana
 */
task get_kibana_repo {
  doLast {
    println "In get_kibana_repo"
    def grgit = Grgit.clone(dir: "$buildDir/kibana",
                            uri: 'git@github.com:elastic/kibana.git',
                            refToCheckout: System.env.ESTF_KIBANA_VERSION)
    println grgit.describe()
  }
}

task get_jenkins_exe (dependsOn: get_kibana_repo, type: Copy) {
    println "In get_jenkins_exec"
    from "$buildDir/../../kibana"
    into "$buildDir/kibana"
    include "jenkins_kibana_tests.sh"
}

task kibana_selenium_tests {
    doFirst {
        // Setup cloud cluster
        def _setup_task = genSetupTask('kibana')
        _setup_task.execute()

        def propFile = _setup_task.getPropertiesFile()

        // Load properties file
        Properties properties = new Properties()
        File propertiesFile = new File(propFile.trim())
        propertiesFile.withInputStream {
            properties.load(it)
        }

        URI kibanaUri = new URI(properties.kibana_url)
        URI elasticUri = new URI(properties.elasticsearch_url)

        // Add system environment variables
        def envList = []
        System.getenv().each { key, value ->
            envList.add(key + "=" + value)
        }

        println "**************"
        println System.getenv()
        println "**************"

        // Add specific Kibana environment variables
        envList.add("TEST_KIBANA_HOSTNAME=" + kibanaUri?.getHost())
        envList.add("TEST_KIBANA_PROTOCOL=" + 'https')
        envList.add("TEST_KIBANA_PORT=" + kibanaUri?.getPort())
        envList.add("TEST_KIBANA_USER=" + properties.es_username)
        envList.add("TEST_KIBANA_PASS=" + properties.es_password)

        envList.add("TEST_ES_HOSTNAME=" + elasticUri?.getHost())
        envList.add("TEST_ES_PROTOCOL=" + 'https')
        envList.add("TEST_ES_PORT=" + elasticUri?.getPort())
        envList.add("TEST_ES_USER=" + properties.es_username)
        envList.add("TEST_ES_PASS=" + properties.es_password)

        // Run Kibana tests
        println "Running Kibana Tests...."
        ShellCommand shell = new ShellCommand("./jenkins_kibana_tests.sh cloud_selenium", "$buildDir/kibana", envList)
        shell.waitFor()

        println "**************"
        println System.getenv()
        println "**************"

        def _cleanup_task = genCleanupTask('kibana', _setup_task.getClusterId())

        if (shell.getRc() != 0) {
            _cleanup_task.execute()
             throw new GradleException("Kibana Selenium Tests Failed")
        }  else {
             _cleanup_task.execute()
        }
    }
}

task kibana_xpack_tests {
    doFirst {

        // Setup cloud cluster
        def _setup_task = genSetupTask('kibana')
        _setup_task.execute()

        def propFile = _setup_task.getPropertiesFile()

        // Load properties file
        Properties properties = new Properties()
        File propertiesFile = new File(propFile.trim())
        propertiesFile.withInputStream {
            properties.load(it)
        }

        URI kibanaUri = new URI(properties.kibana_url)
        URI elasticUri = new URI(properties.elasticsearch_url)

        // Add system environment variables
        def envList = []
        System.getenv().each { key, value ->
            envList.add(key + "=" + value)
        }

        println "**************"
        println System.getenv()
        println "**************"

        // Add specific Kibana environment variables
        envList.add("TEST_KIBANA_HOSTNAME=" + kibanaUri?.getHost())
        envList.add("TEST_KIBANA_PROTOCOL=" + 'https')
        envList.add("TEST_KIBANA_PORT=" + kibanaUri?.getPort())
        envList.add("TEST_KIBANA_USER=" + properties.es_username)
        envList.add("TEST_KIBANA_PASS=" + properties.es_password)

        envList.add("TEST_ES_HOSTNAME=" + elasticUri?.getHost())
        envList.add("TEST_ES_PROTOCOL=" + 'https')
        envList.add("TEST_ES_PORT=" + elasticUri?.getPort())
        envList.add("TEST_ES_USER=" + properties.es_username)
        envList.add("TEST_ES_PASS=" + properties.es_password)

        // Run Kibana tests
        println "Running Kibana Tests...."
        ShellCommand shell = new ShellCommand("./jenkins_kibana_tests.sh cloud_xpack", "$buildDir/kibana", envList)
        shell.waitFor()

        println "**************"
        println System.getenv()
        println "**************"

        def _cleanup_task = genCleanupTask('kibana', _setup_task.getClusterId())

        if (shell.getRc() != 0) {
            _cleanup_task.execute()
             throw new GradleException("Kibana Xpack Tests Failed")
        }  else {
             _cleanup_task.execute()
        }
    }
}

task upgrade {
    doFirst {
        // Setup cloud cluster
        def _setup_task = genSetupTask('kibana')
        _setup_task.execute()

        def propFile = _setup_task.getPropertiesFile()

        // Load properties file
        Properties properties = new Properties()
        File propertiesFile = new File(propFile.trim())
        propertiesFile.withInputStream {
            properties.load(it)
        }

        upgrade.ext.kibana_url = properties.kibana_url
        upgrade.ext.es_url = properties.elasticsearch_url
        upgrade.ext.username = properties.es_username
        upgrade.ext.password = properties.es_password

        // Upload data
        upload_bank_data.execute()

        // Upgrade cloud cluster
        def cluster_id = _setup_task.getClusterId()
        def kibana_cluster_id = _setup_task.getKibanaClusterId()

        def _upgrade_task = genUpgradeTask('kibana', cluster_id, kibana_cluster_id, true)
        _upgrade_task.execute()

        // TODO: Tests

        // Cleanup cloud cluster
        def _cleanup_task = genCleanupTask('kibana', _setup_task.getClusterId())
        _cleanup_task.execute()

    }
}

task upload_bank_data(type: UploadData) {
    doFirst {
        esBaseUrl = upgrade.ext.es_url
        kbnBaseUrl = upgrade.ext.kibana_url
        username = upgrade.ext.username
        password = upgrade.ext.password

    }
}

kibana_selenium_tests.dependsOn get_jenkins_exe
kibana_xpack_tests.dependsOn get_jenkins_exe
