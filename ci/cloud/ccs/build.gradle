/*
 *
 * @description: Build tasks for ESS provisioning
 *
 * @author: Liza Mae Dayoub
 *
 */

import groovy.json.JsonSlurper
import org.estf.gradle.CreateCloudDeployment
import org.estf.gradle.EditCloudDeployment
import org.estf.gradle.ShutdownCloudDeployment

task ccs_setup(type: CreateCloudDeployment) {
    doFirst {
        stackVersion = rootProject.createVersion
        remoteVersion = rootProject.remoteVersion
        if (!remoteVersion) {
            throw new GradleException("Remote version must be specified")
        }
    }
    doLast {
        def propFile = getPropertiesFile()
        Properties properties = new Properties()
        File propertiesFile = new File(propFile.trim())
        propertiesFile.withInputStream {
            properties.load(it)
        }

        def remotePropFile = getRemotePropertiesFile()
        Properties remoteProperties = new Properties()
        File remotePropertiesFile = new File(remotePropFile.trim())
        remotePropertiesFile.withInputStream {
            remoteProperties.load(it)
        }

        rootProject.ext.ccs = true
        rootProject.ext.props = properties
        rootProject.ext.deployment_id = getDeploymentId()
        rootProject.ext.cluster_id = getElasticsearchClusterId()
        rootProject.ext.kibana_cluster_id = getKibanaClusterId()

        rootProject.ext.remoteprops = remoteProperties
        rootProject.ext.remote_deployment_id = getRemoteDeploymentId()

        // Print information about elasticsearch and kibana
        URLConnection kbnUrl = new URL(properties.kibana_url.toString() + "/api/status").openConnection()
        URLConnection esUrl =  new URL(properties.elasticsearch_url.toString()).openConnection()
        String userPassword = properties.es_username + ":" + properties.es_password
        String basicAuth = "Basic " + new String(Base64.getEncoder().encode(userPassword.getBytes()))
        println("---------- KIBANA INFO ----------")
        kbnUrl.setRequestProperty ("Authorization", basicAuth)
        int kbnGetRC = kbnUrl.getResponseCode()
        println(kbnGetRC)
        if(kbnGetRC == 200) {
            String kibanaInfo = kbnUrl.getInputStream().getText()
            println(kibanaInfo)
            JsonSlurper jsonSlurp = new JsonSlurper()
            def data = jsonSlurp.parseText(kibanaInfo)
            rootProject.ext.kibana_hash = data["version"]["build_hash"]
        }
        println("---------- ELASTICSEARCH INFO --------")
        esUrl.setRequestProperty ("Authorization", basicAuth)
        int esGetRC = esUrl.getResponseCode()
        println(esGetRC)
        if(esGetRC == 200) {
            println(esUrl.getInputStream().getText())
        }
    }
}

task ccs_disable_saml_login(type: EditCloudDeployment) {
    doFirst {
        deploymentId = rootProject.deployment_id
        disableSamlLogin = true
    }
}

task ccs_cleanup(type: ShutdownCloudDeployment) {
    doFirst {
        deploymentId =  rootProject.deployment_id
    }
    onlyIf {
        rootProject.hasProperty('ccs')
    }
}

task ccs_remote_cleanup(type: ShutdownCloudDeployment) {
    doFirst {
        deploymentId =  rootProject.remote_deployment_id
    }
    onlyIf {
        rootProject.hasProperty('ccs')
    }
}

task ccs_run_kibana_tests {
    doFirst {
        println "Run tests"
    }
}

task kibana_ccs_tests {
    dependsOn tasks.getByPath(':common:run_kibana_tests')
}

String _job = System.env.JOB ?: ""
String _cloud_version = ""
def _remote_cloud_version = null
if (_job) {
    def jsonSlurper = new JsonSlurper()
    def data = jsonSlurper.parseText(new File("$projectDir/css_paths.json").text)
    String jobName = data["$_job"]
    if (jobName) {
        def testPaths = jobName.split(',')
        if (testPaths.size() < 3) {
            throw new Exception("Test path is malformed!")
        }
        rootProject.ext.kibana_version = testPaths[0]
        _cloud_version = testPaths[1]
        _remote_cloud_version = testPaths[2]
    }
}

rootProject.ext.remoteVersion = System.env.ESTF_REMOTE_CLOUD_VERSION ?: _remote_cloud_version
rootProject.ext.createVersion = System.env.ESTF_CLOUD_VERSION ?: _cloud_version

ccs_run_kibana_tests.dependsOn ccs_setup, ccs_disable_saml_login, kibana_ccs_tests
ccs_disable_saml_login.mustRunAfter(ccs_setup)
kibana_ccs_tests.mustRunAfter(ccs_disable_saml_login)
tasks.getByPath(':common:run_kibana_tests').finalizedBy ccs_cleanup, ccs_remote_cleanup
ccs_run_kibana_tests.finalizedBy ccs_cleanup, ccs_remote_cleanup
