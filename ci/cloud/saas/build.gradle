/*
 *
 * @description: Build tasks for ESS provisioning
 *
 * @author: Liza Mae Dayoub
 *
 */

import groovy.json.JsonSlurper
import org.estf.gradle.CreateCloudDeployment
import org.estf.gradle.EditCloudDeployment
import org.estf.gradle.ShutdownCloudDeployment

task saas_setup(type: CreateCloudDeployment) {
    doFirst {
        stackVersion = System.env.ESTF_CLOUD_VERSION
        String version = (System.env.ESTF_KIBANA_VERSION).minus('origin/')
        String jobName = System.env.JOB.trim()
        try {
            URL defaultCfgUrl = new URL("https://raw.githubusercontent.com/elastic/elastic-stack-testing/" +
                    version + "/ci/cloud/product/settings/kibana.yml")

            URL jobCfgUrl = new URL("https://raw.githubusercontent.com/elastic/elastic-stack-testing/" +
                    version + "/ci/cloud/product/settings/" + jobName + ".yml")

            HttpURLConnection jobCfgHttp = (HttpURLConnection) jobCfgUrl.openConnection()
            if (jobCfgHttp.getResponseCode() == 200) {
                kibanaUserSettingsOverride = jobCfgUrl.getText('UTF-8')
            } else {
                kibanaUserSettingsOverride = defaultCfgUrl.getText('UTF-8')
            }
        } catch (Exception ignored) {
        }

        if (System.env.JOB == "xpackGrp3") {
            mlTesting = true
            ingestNodeTesting = true
            kbnReportsTesting = true
        } else if (System.env.JOB == "xpackGrp2" || System.env.JOB == "xpackGrp4") {
            kbnReportsTesting = true
        } else if (System.env.JOB == "xpackExtGrp1") {
            kbnReportsTesting = true
        } else if (System.env.JOB == "xpackExtGrp2") {
            mlTesting = true
            ingestNodeTesting = true
        }
        if (System.env.ESTF_ML_TESTING) {
            mlTesting = true
        }
        if (System.env.ESTF_INGEST_NODE_TESTING) {
            ingestNodeTesting = true
        }
        if (System.env.ESTF_KIBANA_REPORTS_TESTING) {
            kbnReportsTesting = true
        }
    }
    doLast {
        def propFile = getPropertiesFile()
        Properties properties = new Properties()
        File propertiesFile = new File(propFile.trim())
        propertiesFile.withInputStream {
            properties.load(it)
        }

        rootProject.ext.props = properties
        rootProject.ext.deployment_id = getDeploymentId()
        rootProject.ext.cluster_id = getElasticsearchClusterId()
        rootProject.ext.kibana_cluster_id = getKibanaClusterId()

        // Print information about elasticsearch and kibana
        URLConnection kbnUrl = new URL(properties.kibana_url.toString() + "/api/status").openConnection()
        URLConnection esUrl =  new URL(properties.elasticsearch_url.toString()).openConnection()
        String userPassword = properties.es_username + ":" + properties.es_password
        String basicAuth = "Basic " + new String(Base64.getEncoder().encode(userPassword.getBytes()))
        println("---------- KIBANA INFO ----------")
        kbnUrl.setRequestProperty ("Authorization", basicAuth)
        int kbnGetRC = kbnUrl.getResponseCode()
        println(kbnGetRC)
        if(kbnGetRC == 200) {
            String kibanaInfo = kbnUrl.getInputStream().getText()
            println(kibanaInfo)
            JsonSlurper jsonSlurp = new JsonSlurper()
            def data = jsonSlurp.parseText(kibanaInfo)
            rootProject.ext.kibana_hash = data["version"]["build_hash"]
        }
        println("---------- ELASTICSEARCH INFO --------")
        esUrl.setRequestProperty ("Authorization", basicAuth)
        int esGetRC = esUrl.getResponseCode()
        println(esGetRC)
        if(esGetRC == 200) {
            println(esUrl.getInputStream().getText())
        }
    }
}

task saas_disable_saml_login(type: EditCloudDeployment) {
    doFirst {
        deploymentId = rootProject.deployment_id
        disableSamlLogin = true
    }
}

task saas_cleanup(type: ShutdownCloudDeployment) {
    doFirst {
        deploymentId =  rootProject.deployment_id
    }
}

task saas_run_kibana_tests {
    doFirst {
        println "Run tests"
    }
}
task run_kibana_tests {
    dependsOn tasks.getByPath(':common:run_kibana_tests')
}

saas_run_kibana_tests.dependsOn saas_setup, saas_disable_saml_login, run_kibana_tests
saas_disable_saml_login.mustRunAfter(saas_setup)
run_kibana_tests.mustRunAfter(saas_disable_saml_login)
saas_run_kibana_tests.finalizedBy saas_cleanup
