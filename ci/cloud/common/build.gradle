/*
    @description: Common tasks for cloud testing

    @author: Liza Dayoub

 */

import org.estf.gradle.ShellCommand

group 'org.estf.cloud'
version '1.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

static def runcmd(String c, File dir) {
    println(c)
    Process p
    if (dir == null)
        p = c.execute()
    else
        p = c.execute([], dir)
    p.waitFor()
    println(p.text)
    println(p.exitValue())
    if (p.exitValue() != 0) {
        throw new GradleException('Error ' + c)
    }
}

task get_kibana_repo {
    doFirst {
        println "In ${name}"
        def github_owner = System.env.ESTF_GITHUB_OWNER ?: "elastic"
        def repo = System.env.ESTF_GITHUB_REPO ?: "kibana.git"
        def version = (System.env.ESTF_KIBANA_VERSION) ?: rootProject.kibana_version
        def branch = System.env.ESTF_GITHUB_BRANCH
        def commit = System.env.ESTF_GITHUB_COMMIT
        version = version.minus('origin/').replaceAll('master', 'main')
        def kibanaRefRepo = System.env.ESTF_KIBANA_REF_REPO ?: "/var/lib/jenkins/.git-references/kibana.git"

        String checkout_ver = version

        if (github_owner != "elastic" && !branch) {
           throw new GradleException("ESTF_GITHUB_BRANCH must be specified")
        }
        if (branch) {
          checkout_ver = branch
        }

        def cloneOpts = ""
        if (kibanaRefRepo) {
            File kibanaRefRepoDir = new File(kibanaRefRepo)
            if (kibanaRefRepoDir.exists()) {
                cloneOpts = '--reference ' + kibanaRefRepo
            }
        }

        String kibanaRepo = 'git@github.com:' + github_owner + '/' + repo
        String cloneCmd = 'git clone ' + cloneOpts + ' ' + kibanaRepo + ' ' + "$buildDir/kibana"
        File dir = new File("$buildDir/kibana")
        runcmd(cloneCmd, null)

        runcmd('git checkout ' + checkout_ver, dir)

        if (commit) {
            runcmd('git checkout ' + commit.toString(), dir)
        } else if (rootProject.hasProperty('kibana_hash') && ! System.env.ESTF_FLAKY_TEST_SUITE && ! System.env.ESTF_KIBANA_CHECKOUT_LATEST) {
            runcmd('git checkout ' + rootProject.kibana_hash.toString(), dir)
        }

        def src = new File(System.env.WORKSPACE.toString() + "/ci/kibana/jenkins_kibana_tests.sh")
        if (!src.exists()) {
          throw new GradleException("jenkins_kibana_tests.sh does not exist")
        }
        def dst = new File("$buildDir/kibana/jenkins_kibana_tests.sh")
        dst << src.text
        dst.setExecutable(true, false)

        def src2 = new File(System.env.WORKSPACE.toString() + "/ci/kibana/group_defs.sh")
        if (!src2.exists()) {
          throw new GradleException("group_defs.sh does not exist")
        }
        def dst2 = new File("$buildDir/kibana/group_defs.sh")
        dst2 << src2.text
        dst2.setExecutable(true, false)

    }
}

task get_kibana_commit(type:Exec, dependsOn: get_kibana_repo) {
    doFirst {
        print "In ${name}"
        println("---------- KIBANA REPO COMMIT INFO ----------")
        workingDir "$buildDir/kibana"
        commandLine 'git', 'log', '--pretty=oneline', '--abbrev-commit', '-n', '1'
    }
}

task run_kibana_tests(dependsOn: get_kibana_commit) {
    doFirst {

        // Add system environment variables
        List envList = []
        System.getenv().each { key, value ->
            envList.add(key + "=" + value)
        }

        def kibanaUri = new URI(rootProject.props.kibana_url.toString())
        def elasticUri = new URI(rootProject.props.elasticsearch_url.toString())

        if (rootProject.ccs) {
            def remoteElasticUri = new URI(rootProject.remoteprops.elasticsearch_url.toString())

            def auth = 'https://' + (String) rootProject.props.es_username + ":" +
                    (String) rootProject.props.es_password + "@"
            def remote_auth =  'https://' + (String) rootProject.remoteprops.es_username + ":" +
                    (String) rootProject.remoteprops.es_password + "@"

            def kbn_url_auth = auth + kibanaUri?.getHost() + ":" +  kibanaUri?.getPort()
            def es_url_auth = auth + elasticUri?.getHost() + ":" + elasticUri?.getPort()
            def remote_es_url_auth = remote_auth + remoteElasticUri?.getHost() + ":" +  remoteElasticUri?.getPort()

            envList.add("TEST_KIBANA_URL=" + kbn_url_auth)
            envList.add("TEST_ES_URL=" + es_url_auth)
            envList.add("REMOTE_CLUSTER_URL=" + remote_es_url_auth)

        } else {
            // Add specific Kibana environment variables
            envList.add("TEST_KIBANA_HOSTNAME=" + kibanaUri?.getHost())
            envList.add("TEST_KIBANA_PROTOCOL=" + 'https')
            envList.add("TEST_KIBANA_PORT=" + kibanaUri?.getPort())
            envList.add("TEST_KIBANA_USERNAME=" + rootProject.props.es_username.toString())
            envList.add("TEST_KIBANA_PASS=" + rootProject.props.es_password.toString())

            envList.add("TEST_ES_HOSTNAME=" + elasticUri?.getHost())
            envList.add("TEST_ES_PROTOCOL=" + 'https')
            envList.add("TEST_ES_PORT=" + elasticUri?.getPort())
            envList.add("TEST_ES_USERNAME=" + rootProject.props.es_username.toString())
            envList.add("TEST_ES_PASS=" + rootProject.props.es_password.toString())
        }

        println "************ KIBANA TEST ENVIRONMENT VARS ************"
        println envList
        println "******************************************************"

        if (rootProject.hasProperty('tls_reject')) {
            envList.add("NODE_TLS_REJECT_UNAUTHORIZED=0")
            envList.add("TEST_IGNORE_CERT_ERRORS=1")
        }

        println "************"
        println System.getenv()
        println "************"

        println "************"
        println envList
        println "************"

        println "Running Kibana Tests...."

        // Run Kibana tests
        ShellCommand shell
        if (System.env.ESTF_FLAKY_TEST_SUITE) {
            shell = new ShellCommand("./jenkins_kibana_tests.sh flaky_test_runner", "$buildDir/kibana", envList)
        } else if (rootProject.ccs) {
            shell = new ShellCommand("./jenkins_kibana_tests.sh ccs", "$buildDir/kibana", envList)
        } else {
            shell = new ShellCommand("./jenkins_kibana_tests.sh cloud " + System.env.JOB.toString(), "$buildDir/kibana", envList)
        }
        shell.waitFor()

        if (shell.getRc() != 0) {
            throw new GradleException("Kibana Tests Failed!")
        }
    }
}
