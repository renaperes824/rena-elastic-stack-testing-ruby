/*
 * @description: Gradle script for ECK testing.
 *
 * @author: Liza Mae Dayoub
 *
 */

import org.estf.gradle.ShellCommand;
import org.ajoberstar.grgit.Grgit;
import org.estf.gradle.EckCredentials;

import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.net.URLConnection;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.security.cert.X509Certificate;

import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.DumperOptions;

plugins {
  id 'org.ajoberstar.grgit' version '4.0.2' apply false
}

group 'org.estf.cloud'
version '1.0'

apply plugin: 'groovy'

repositories {
    mavenCentral()
}

/*
 ***********************************************************************************
 Common
 ***********************************************************************************
 */
def runShell(cmd, dir) {
  ShellCommand shell = new ShellCommand(cmd, dir)
  shell.waitFor()
  def out = shell.getOutput()
  if (shell.getRc() != 0) {
    println out
    throw new GradleException('Error running command: ' + cmd)
  }
  return out
}

/*
 ***********************************************************************************
 Check environment variables
 ***********************************************************************************
 */
task getenv_var {
  doFirst {
    assert(System.env.ESTF_KIBANA_VERSION &&
           System.env.ESTF_CLOUD_VERSION &&
           System.env.ESTF_BUILD_HASH)
    ext.kibana_ver = (System.env.ESTF_KIBANA_VERSION).minus('origin/')
    ext.cloud_ver =  System.env.ESTF_CLOUD_VERSION
    ext.build_hash = System.env.ESTF_BUILD_HASH
    ext.region = System.env.ESTF_CLOUD_REGION ?: "us-central1-a"
    ext.estf_ver = kibana_ver
    if (kibana_ver == "master") {
      ext.estf_ver = "main"
    }
    ext.homedir = System.env.HOME
    ext.gc_project = "elastic-automation"
    ext.whole_ver = "$cloud_ver-$build_hash"
    ext.gcr_es = "gcr.io/$gc_project/elasticsearch:$whole_ver"
    ext.gcr_kbn = "gcr.io/$gc_project/kibana:$whole_ver"
    ext.eck_url = "https://download.elastic.co/downloads/eck/1.3.0/all-in-one.yaml"

  }
}

// *********************************************************************************
task gcloud_auth() {
  doFirst {
    EckCredentials creds = new EckCredentials()
    creds.dir = "$projectDir"
    creds.vaultAuth()
    def filename = creds.getFileName()
    def username = creds.getUserName()
    def out = runShell("gcloud auth activate-service-account " + username +
                      " --key-file " + filename +
                      " --project " + "${getenv_var['gc_project']}",
                      "$projectDir")
  }
}


// *********************************************************************************
task dockr_login() {
  doFirst {
    EckCredentials creds = new EckCredentials()
    creds.dir = "$projectDir"
    creds.vaultAuth()
    def filename = creds.getFileName()
    def out = runShell('docker login -u _json_key -p "' + filename +
                       '" https://gcr.io', "$projectDir")
  }
}

/*
 ***********************************************************************************
  Kubernetes / Kubectl
 ***********************************************************************************
 */

// *********************************************************************************
def downloadKubectl(dirname) {
  exec {
    workingDir dirname
    commandLine 'curl', '-LOs',
      'https://storage.googleapis.com/kubernetes-release/release/v1.19.0/bin/linux/amd64/kubectl'
  }
  exec {
    workingDir dirname
    commandLine 'chmod', '+x', 'kubectl'
  }
}

// *********************************************************************************
task create_container() {
  doFirst {
    downloadKubectl("$projectDir")
    def num = Math.abs(new Random().nextInt() % 25000) + 1
    def name = "estf-cluster-" + num.toString()
    def out = runShell("gcloud container clusters create " + name +
                       " --zone " + "${getenv_var['region']}" +
                       " --num-nodes 1" +
                       " --project " + "${getenv_var['gc_project']}" +
                       " --machine-type n1-highmem-4" +
                       " --no-enable-basic-auth" +
                       " --no-issue-client-certificate" +
                       " --enable-ip-alias",
                       "$projectDir")
    def match = (out =~ /${name}(.*)RUNNING/)
    if (! match.find()) {
       throw new GradleException("Google container create failed!")
    }
    rootProject.ext.cluster_name = name
  }
}

// *********************************************************************************
task delete_container() {
  doFirst {
    def out = runShell("gcloud container clusters delete " + rootProject.ext.cluster_name +
                       " --zone " + "${getenv_var['region']}" +
                       " --project " + "${getenv_var['gc_project']}" +
                       " --quiet",
                       "$projectDir")
    def match = (out =~ /Deleted/)
    if (! match.find()) {
       throw new GradleException("Google container delete failed!")
    }
  }
}

/*
 ***********************************************************************************
  ECK
 ***********************************************************************************
 */

// *********************************************************************************
task install_eck(type: Exec) {
  doFirst {
    commandLine "bash", "-c", "$projectDir/kubectl apply -f ${getenv_var['eck_url']}"
  }
}

// *********************************************************************************
task uninstall_eck(type: Exec) {
  doFirst {
    commandLine "bash", "-c", "$projectDir/kubectl get namespaces --no-headers -o custom-columns=:metadata.name | xargs -n1 $projectDir/kubectl delete elastic --all -n"
  }
}

// *********************************************************************************
task uninstall_operator(type: Exec) {
  doFirst {
    commandLine "bash", "-c", "$projectDir/kubectl delete -f ${getenv_var['eck_url']}"
  }
}

/*
 ***********************************************************************************
  Common
 ***********************************************************************************
 */

// *********************************************************************************
def updateSpec(type, filename, image) {
  DumperOptions dump = new DumperOptions();
  dump.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
  dump.setDefaultScalarStyle(DumperOptions.ScalarStyle.PLAIN);
  dump.setPrettyFlow(true);
  dump.setIndent(2);
  dump.setCanonical(false);
  Yaml yaml = new Yaml(dump);
  File file = new File(filename)
  Map map = yaml.load(file.newInputStream());
  map["spec"]["version"] = "${getenv_var['cloud_ver']}".toString()
  map["spec"]["image"] =  image.toString()
  if ( type == "kibana") {
    def kbnSettingsUrl = "https://raw.githubusercontent.com/elastic/elastic-stack-testing/" +
                         "${getenv_var['estf_ver']}" + "/ci/cloud/product/settings/kibana.yml"
    map["spec"]["config"] = new URL(kbnSettingsUrl).getText('UTF-8')
  }
  file.write(yaml.dump(map).toString().replaceAll("config: \\|", "config:"))
}

/*
 ***********************************************************************************
  Elasticsearch
 ***********************************************************************************
 */

// *********************************************************************************
def waitForElasticsearch() {
  long finish = System.currentTimeMillis() + 300000;
  def isRunning = false
  while (System.currentTimeMillis() < finish) {
    def out = runShell('./kubectl get elasticsearch', "$projectDir")
    def match = (out =~ /green(.*)Ready/)
    if (match.find()) {
      isRunning = true
      break
    }
    Thread.sleep(10000);
  }
  if (! isRunning) {
    throw new GradleException("Elasticsearch failed to come up!")
  }
}

// *********************************************************************************
task deploy_elasticsearch_cluster() {
  doFirst {
    updateSpec("elasticsearch", "$projectDir/es-spec.yml", "${getenv_var['gcr_es']}")
    def out = runShell("./kubectl apply -f" + "$projectDir/es-spec.yml",
                       "$projectDir")
    def match = (out =~ /elasticsearch(.*)created/)
    if (! match.find()) {
     throw new GradleException("Deploy Elasticsearch failed!")
    }

    waitForElasticsearch()
  }
}

// *********************************************************************************
def getElasticsearchPassword(dirname) {
  def s = new ByteArrayOutputStream()
  exec {
    workingDir dirname
    commandLine './kubectl', 'get', 'secret', 'estfk8-es-elastic-user',
                "-o=jsonpath='{.data.elastic}'"
    standardOutput = s
  }
  def password = s.toString().trim()
  def len = password.length() - 1
  byte[] decoded = Base64.getDecoder().decode(password.substring(1,len))
  return new String(decoded)
}

// *********************************************************************************
def getExternalIp(svc_name) {

  def out = runShell('./kubectl get svc', "$projectDir")
  def match = (out =~ /$svc_name(.*) ((?:[0-9]{1,3}\.){3}[0-9]{1,3})(.*) ((?:[0-9]{1,3}\.){3}[0-9]{1,3})/)
  if (match.find()) {
    return match.group(4).trim()
  }
  throw new GradleException("Unable to get exernal IP for service: " + svc_name)
}

// *********************************************************************************
task get_credentials() {
  doFirst {

    ext.username = 'elastic'
    ext.password = getElasticsearchPassword("$projectDir")
    ext.elasticsearch_url = "https://" + getExternalIp('estfk8-es-http') + ":9200"
    ext.kibana_url = "https://" + getExternalIp('estfk8-kb-http') + ":5601"

    File file = new File("$projectDir" + "/" + rootProject.ext.cluster_name + ".properties")
    file.write("es_username=" + username + "\n")
    file.append("es_password=" + password + "\n")
    file.append("kibana_url=" + kibana_url + "\n")
    file.append("elasticsearch_url=" + elasticsearch_url + "\n")

    Properties properties = new Properties()
    file.withInputStream {
        properties.load(it)
    }

    rootProject.ext.props = properties
    rootProject.ext.tls_reject = "true"

    // Print information about elasticsearch and kibana
    // Create a trust manager that does not validate certificate chains
    TrustManager[] trustAllCerts = [ new X509TrustManager() {
      public java.security.cert.X509Certificate[] getAcceptedIssuers() {
          return null;
      }
      public void checkClientTrusted(X509Certificate[] certs, String authType) {
      }
      public void checkServerTrusted(X509Certificate[] certs, String authType) {
      }
    }];

    // Install the all-trusting trust manager
    SSLContext sc = SSLContext.getInstance("SSL");
    sc.init(null, trustAllCerts, new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

    // Create all-trusting host name verifier
    HostnameVerifier allHostsValid = new HostnameVerifier() {
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    };

    // Install the all-trusting host verifier
    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    // Sometimes the Kibana API status page is not ready, try waiting a bit before connecting
    Thread.sleep(10000);
    def kbn_url = new URL(properties.kibana_url + "/api/status").openConnection();
    def es_url =  new URL(properties.elasticsearch_url).openConnection();
    String userpass = properties.es_username + ":" + properties.es_password;
    String basicAuth = "Basic " + new String(Base64.getEncoder().encode(userpass.getBytes()));
    println("---------- KIBANA INFO ----------")
    kbn_url.setRequestProperty ("Authorization", basicAuth);
    def kbnGetRC = kbn_url.getResponseCode();
    println(kbnGetRC);
    if(kbnGetRC.equals(200)) {
        println(kbn_url.getInputStream().getText());
    }
    println("---------- ELASTICSEARCH INFO --------")
    es_url.setRequestProperty ("Authorization", basicAuth);
    def esGetRC = es_url.getResponseCode();
    println(esGetRC);
    if(esGetRC.equals(200)) {
        println(es_url.getInputStream().getText());
    }
  }
}

/*
 ***********************************************************************************
  Kibana
 ***********************************************************************************
 */

// *********************************************************************************
def waitForKibana() {
  long finish = System.currentTimeMillis() + 300000;
  def isRunning = false
  while (System.currentTimeMillis() < finish) {
    def out = runShell("./kubectl get kibana", "$projectDir")
    def match = (out =~ /green/)
    if (match.find()) {
      isRunning = true
      break
    }
    Thread.sleep(10000);
  }
  if (! isRunning) {
    throw new GradleException("Kibana failed to come up!")
  }
}

// *********************************************************************************
task deploy_kibana_cluster() {
  doFirst {
    updateSpec("kibana", "$projectDir/kbn-spec.yml", "${getenv_var['gcr_kbn']}")
    def out = runShell("./kubectl apply -f" + "$projectDir/kbn-spec.yml",
                       "$projectDir")
    def match = (out =~ /kibana(.*)created/)
    if (! match.find()) {
     throw new GradleException("Deploy Kibana failed!")
    }
    waitForKibana()
  }
}

// *********************************************************************************
task stop_forward_kbn_port() {
  doFirst {
    if (tasks.start_forward_kbn_port.process) {
      tasks.start_forward_kbn_port.process.destroy()
    }
  }
}

// *********************************************************************************
task start_forward_kbn_port() {
  doFirst {
    ext.process = new ProcessBuilder()
                      .directory(projectDir)
                      .command("./kubectl", "port-forward", "--request-timeout=4h",
                               "service/estfk8-kb-http", "5601")
                      .start()
    Thread.sleep(2000)
  }
}

// *********************************************************************************
task activate_trial_license() {
  doFirst {
    def out = runShell("./kubectl apply -f" + "$projectDir/trial-license-spec.yml",
                       "$projectDir")
    def match = (out =~ /eck-trial-license created/)
    if (! match.find()) {
     throw new GradleException("Activate trial license failed!")
    }
    Thread.sleep(2000)
  }
}

/*
 ***********************************************************************************
  Docker Images
 ***********************************************************************************
 */

// *********************************************************************************
def gcrImageExists(name) {
  String [] s = name.split(':')
  def out = runShell('gcloud container images list-tags ' + s[0], "$projectDir")
  if (out.indexOf(s[1]) < 0) {
    return false
  }
  return true
}

// *********************************************************************************
def downloadDockerImage(url) {
  exec {
    commandLine 'curl', '-LOs', url
  }
}

// *********************************************************************************
def loadDockerImage(name) {
  exec {
    commandLine 'docker', 'load', '--input', name
  }
}

// *********************************************************************************
def tagDockerImage(img, gcr_img) {
  exec {
    commandLine 'docker', 'tag', img, gcr_img
  }
}

// *********************************************************************************
task docker_load_tag() {

  doFirst {

    def staging_base = "https://staging.elastic.co/${getenv_var['whole_ver']}"
    def snapshot_base = "https://snapshots.elastic.co/${getenv_var['whole_ver']}"

    def es_path = "/downloads/elasticsearch/elasticsearch-${getenv_var['cloud_ver']}"
    def kbn_path = "/downloads/kibana/kibana-${getenv_var['cloud_ver']}"

    def docker_path = "-docker-image.tar.gz"
    def docker_snapshot = "-SNAPSHOT-$docker_path"

    def es_docker_image = "docker.elastic.co/elasticsearch/elasticsearch:${getenv_var['cloud_ver']}"
    def kbn_docker_image = "docker.elastic.co/kibana/kibana:${getenv_var['cloud_ver']}"

    URL url_staging_es = new URL(staging_base + es_path + docker_path)
    URL url_staging_kbn = new URL (staging_base + kbn_path + docker_path)

    URL url_snapshot_es = new URL(snapshot_base + es_path + docker_snapshot)
    URL url_snapshot_kbn = new URL(snapshot_base + kbn_path + docker_snapshot)

    if (url_staging_es.openConnection().getResponseCode() == 200 &&
        url_staging_kbn.openConnection().getResponseCode() == 200) {

        downloadDockerImage(url_staging_es.toString())
        downloadDockerImage(url_staging_kbn.toString())

        loadDockerImage(new File(url_staging_es.getPath()).getName())
        loadDockerImage(new File(url_staging_kbn.getPath()).getName())

    } else if (url_snapshot_es.openConnection().getResponseCode() == 200 &&
               url_snapshot_kbn.openConnection().getResponseCode() == 200) {

        downloadDockerImage(url_snapshot_es.toString())
        downloadDockerImage(url_snapshot_kbn.toString())

        loadDockerImage(new File(url_snapshot_es.getPath()).getName())
        loadDockerImage(new File(url_snapshot_kbn.getPath()).getName())

        es_docker_image = es_docker_image + '-SNAPSHOT'
        kbn_docker_image = kbn_docker_image + '-SNAPSHOT'

    } else {
      throw new GradleException("Images do not exist for version and hash")
    }

    tagDockerImage(es_docker_image, "${getenv_var['gcr_es']}")
    tagDockerImage(kbn_docker_image, "${getenv_var['gcr_kbn']}")

  }
}

// *********************************************************************************
task docker_push_gcr_es(type: Exec) {
  onlyIf {
    ! gcrImageExists("${getenv_var['gcr_es']}")
  }
  doFirst {
    commandLine 'docker', 'push', "${getenv_var['gcr_es']}"
  }
}

// *********************************************************************************
task docker_push_gcr_kbn(type: Exec) {
  onlyIf {
    ! gcrImageExists("${getenv_var['gcr_kbn']}")
  }
  doFirst {
    commandLine 'docker', 'push', "${getenv_var['gcr_kbn']}"
  }
}

// *********************************************************************************
task eck_push_gcr_images(type: GradleBuild) {
  println "In ${name}"
  tasks = ['getenv_var', 'docker_login', 'docker_load_tag',
           'docker_push_gcr_es', 'docker_push_gcr_kbn']
}

// *********************************************************************************
task eck_run_kibana_tests(dependsOn: getenv_var) {
  doFirst {
    gcloud_auth.execute()
    create_container.execute()
    install_eck.execute()
    deploy_elasticsearch_cluster.execute()
    deploy_kibana_cluster.execute()
    activate_trial_license.execute()
    get_credentials.execute()
    tasks.getByPath(':common:run_kibana_tests').execute()
  }
}

eck_run_kibana_tests.finalizedBy uninstall_eck, uninstall_operator, delete_container

delete_container.mustRunAfter uninstall_eck, uninstall_operator
uninstall_operator.mustRunAfter uninstall_eck
