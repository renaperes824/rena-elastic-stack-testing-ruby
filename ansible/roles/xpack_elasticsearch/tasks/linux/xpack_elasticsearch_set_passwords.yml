# ----------------------------------------------------------------------------
# Elasticsearch x-pack password
#
# Author: liza.dayoub@elastic.co
# ----------------------------------------------------------------------------
---


- name: Check if password is set
  block:
    - name: Elasticsearch HTTPS GET ?pretty
      uri:
        url: "https://{{ current_host_ip }}:{{ elasticsearch_port }}/?pretty"
        method: GET
        user: "{{ elasticsearch_username }}"
        password: "{{ elasticsearch_password }}"
        validate_certs: false
        return_content: true
      register: elastic_user_auth
      until:
        - elastic_user_auth.status == 200
      retries: 4
      delay: 5
      failed_when: false
    - name: Print Elasticsearch user
      debug:
        msg: '{{ elastic_user_auth }}'

- name: Check if setup passwords executable exists
  stat:
    path: '{{ elasticsearch_setup_passwords_exe }}'
  register: file_setup_passwords

- name: Run setup passwords
  shell: set -o pipefail && echo 'y' | {{ elasticsearch_setup_passwords_exe }} auto
  args:
    executable: /bin/bash
  register: initial_passwords
  when: file_setup_passwords.stat.exists is defined and file_setup_passwords.stat.exists and
        file_setup_passwords.stat.executable is defined and file_setup_passwords.stat.executable and
        elastic_user_auth.status == 401

- name: Print Initial Password
  debug:
    msg: '{{ initial_passwords }}'
  when: initial_passwords is defined

- name: Get initial passwords
  set_fact:
    initial_elasticsearch_password: "{{ initial_passwords.stdout | regex_search('PASSWORD elastic = (.*)', '\\1') | first }}"
    initial_kibana_password: "{{ initial_passwords.stdout | regex_search('PASSWORD kibana = (.*)', '\\1') | first }}"
    initial_logstash_password: "{{ initial_passwords.stdout | regex_search('PASSWORD logstash_system = (.*)', '\\1') | first }}"
  when: initial_passwords.stdout is defined

- name: Print ES Password
  debug:
    msg: '{{ initial_elasticsearch_password }}'
  when: initial_elasticsearch_password is defined

- name: Print KBN Password
  debug:
    msg: '{{ initial_kibana_password }}'
  when: initial_kibana_password is defined

- name: Print LS Password
  debug:
    msg: '{{ initial_logstash_password }}'
  when: initial_logstash_password is defined

- name: Set elastic password
  uri:
    url: "https://{{ current_host_ip }}:{{ elasticsearch_port }}/_security/user/elastic/_password?pretty"
    method: POST
    user: "{{ elasticsearch_username }}"
    password: "{{ initial_elasticsearch_password }}"
    body: '{ "password": "{{ elasticsearch_password }}" }'
    body_format: json
    validate_certs: false
  when: initial_passwords.stdout is defined

- name: Set kibana password
  uri:
    url: "https://{{ current_host_ip }}:{{ elasticsearch_port }}/_security/user/kibana/_password?pretty"
    method: POST
    user: "{{ kibana_username }}"
    password: "{{ initial_kibana_password }}"
    body: '{ "password": "{{ kibana_password }}" }'
    body_format: json
    validate_certs: false
  when: initial_passwords.stdout is defined

- name: Set logstash_system password
  uri:
    url: "https://{{ current_host_ip }}:{{ elasticsearch_port }}/_security/user/logstash_system/_password?pretty"
    method: POST
    user: "{{ logstash_username }}"
    password: "{{ initial_logstash_password }}"
    body: '{ "password": "{{ logstash_password }}" }'
    body_format: json
    validate_certs: false
  when: initial_passwords.stdout is defined
